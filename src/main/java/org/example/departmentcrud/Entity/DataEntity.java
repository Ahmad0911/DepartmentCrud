package org.example.departmentcrud.Entity;
import jakarta.persistence.Column;
import jakarta.persistence.Id;
import lombok.AllArgsConstructor;
import jakarta.persistence.Entity;
import lombok.NoArgsConstructor;

@Entity
@lombok.Data
@NoArgsConstructor
@AllArgsConstructor
public class DataEntity {

    @Id
    private int Id;

    private String firstName;

    private String lastName;

    @Column(unique = true)
    private String email;

    @Column(unique = true)
    private String phoneNumber;

    private String createdBy;

    private String updatedBy;

    private String voidedBy;

    private String dateCreated;

    private String dateUpdated;

    private String dateVoided;


//    // Getters and Setters can be generated by Lombok's @Data annotation
//    public DataEntity(int id, String firstName, String lastName, String email, String phoneNumber, String createdBy, String updatedBy, String voidedBy, String dateCreated, String dateUpdated, String dateVoided) {
//        this.Id = id;
//        this.firstName = firstName;
//        this.lastName = lastName;
//        this.email = email;
//        this.phoneNumber = phoneNumber;
//        this.createdBy = createdBy;
//        this.updatedBy = updatedBy;
//        this.voidedBy = voidedBy;
//        this.dateCreated = dateCreated;
//        this.dateUpdated = dateUpdated;
//        this.dateVoided = dateVoided;
//    }
}


//Create basic CRUD REST endpoints for a user entity in spring boot. The entity should have the following fields:
//id, firstName, lastName,email(must be unique) createdBy, updatedBy, voidedBy, dateCreated, dateUpdated, dateVoided.
//The email and phoneNumber fields cannot be duplicated. Basic validation and error handling are included
//The endpoints support standard operations: save, fetch (by id and all), update, and delete.